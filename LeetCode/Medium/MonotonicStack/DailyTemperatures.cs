namespace LeetCode.Medium.MonotonicStack;

using System.Collections.Generic;

/// <summary>
/// 739. Daily Temperatures
///
/// Идея:
/// Дано: массив температур temperatures[i].
/// Нужно вернуть массив ans, где ans[i] — через сколько дней температура станет выше.
///
/// Подход (монотонный стек):
/// 1️⃣ Идём слева направо.
/// 2️⃣ В стеке храним индексы **дней с ещё не найденным "потеплением"**.
/// 3️⃣ Пока текущая температура > температура на вершине стека:
///     - достаём индекс предыдущего дня,
///     - считаем разницу (i - prev) — сколько дней прошло,
///     - записываем это в ans[prev].
/// 4️⃣ Кладём текущий индекс в стек.
/// 5️⃣ После прохода у тех, кто остался в стеке, потепления не будет → 0.
///
/// Сложность:
/// - Время: O(n) (каждый индекс кладём и убираем максимум один раз)
/// - Память: O(n) (стек)
///
/// Пример:
/// temperatures = [73,74,75,71,69,72,76,73]
/// Output       = [1, 1, 4, 2, 1, 1, 0, 0]
/// </summary>
public class Solution
{
    public int[] DailyTemperatures(int[] temperatures)
    {
        int n = temperatures.Length;
        var ans = new int[n];
        var st = new Stack<int>(); // храним индексы дней

        for (int i = 0; i < n; i++)
        {
            // Пока текущая температура выше, чем у предыдущего дня —
            // обновляем ответ для этого предыдущего дня
            while (st.Count > 0 && temperatures[i] > temperatures[st.Peek()])
            {
                int prev = st.Pop();
                ans[prev] = i - prev; // сколько дней ждать потепления
            }

            // Кладём текущий день в стек
            st.Push(i);
        }

        // Остальные остаются с 0 (значит, потепления не будет)
        return ans;
    }
}